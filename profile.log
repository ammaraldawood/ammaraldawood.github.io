FUNCTION  <SNR>37_SynSet()
    Defined: /opt/homebrew/Cellar/neovim/0.11.3/share/nvim/runtime/syntax/synload.vim:27
Called 7 times
Total time:   0.011554
 Self time:   0.011554

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    7              0.000027   syn clear
    7              0.000017   if exists("b:current_syntax")
                                unlet b:current_syntax
    7              0.000004   endif
                            
    7              0.000021   0verbose let s = expand("<amatch>")
    7              0.000010   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    7              0.000010   elseif s == "OFF"
                                let s = ""
    7              0.000003   endif
                            
    7              0.000006   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
   10              0.000025     for name in split(s, '\.')
    5              0.000014       if !empty(name)
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    5              0.011273         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
    5              0.000005       endif
   10              0.000008     endfor
    7              0.000004   endif

FUNCTION  SetRmdCommentStr()
    Defined: /opt/homebrew/Cellar/neovim/0.11.3/share/nvim/runtime/ftplugin/rmd.vim:39
Called 210 times
Total time:   0.018122
 Self time:   0.018122

count  total (s)   self (s)
  210              0.000537   if line('.') == s:last_line
    5              0.000006     return
  205              0.000080   endif
  205              0.000331   let s:last_line = line('.')
                            
  205              0.015377   if (search("^[ \t]*```[ ]*{r", "bncW") > search("^[ \t]*```$", "bncW")) || ((search('^---$', 'Wn') || search('^\.\.\.$', 'Wn')) && search('^---$', 'bnW'))
  190              0.000856     set commentstring=#\ %s
   15              0.000014   else
   15              0.000098     set commentstring=<!--\ %s\ -->
  205              0.000072   endif

FUNCTION  <SNR>24_Remove_Matches()
    Defined: /opt/homebrew/Cellar/neovim/0.11.3/share/nvim/runtime/plugin/matchparen.vim:203
Called 420 times
Total time:   0.003735
 Self time:   0.003735

count  total (s)   self (s)
  420              0.000862   if exists('w:paren_hl_on') && w:paren_hl_on
   16              0.000026     while !empty(w:matchparen_ids)
    8              0.000031       silent! call remove(w:matchparen_ids, 0)->matchdelete()
   16              0.000025     endwhile
    8              0.000010     let w:paren_hl_on = 0
  420              0.000137   endif

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /opt/homebrew/Cellar/neovim/0.11.3/share/nvim/runtime/ftplugin.vim:15
Called 7 times
Total time:   0.029960
 Self time:   0.029960

count  total (s)   self (s)
    7              0.000066     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    7              0.000010     endif
                            
    7              0.000060     let s = expand("<amatch>")
    7              0.000021     if s != ""
    7              0.000041       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    7              0.000004       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
   14              0.000072       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    7              0.029406         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
   14              0.000137       endfor
    7              0.000006     endif

FUNCTION  <SNR>24_Highlight_Matching_Pair()
    Defined: /opt/homebrew/Cellar/neovim/0.11.3/share/nvim/runtime/plugin/matchparen.vim:45
Called 420 times
Total time:   0.033850
 Self time:   0.030115

count  total (s)   self (s)
  420              0.001379   if !exists("w:matchparen_ids")
                                let w:matchparen_ids = []
  420              0.000260   endif
                              " Remove any previous match.
  420   0.006315   0.002580   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  420              0.001134   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  420              0.000122   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  420              0.000740   let c_lnum = line('.')
  420              0.000558   let c_col = col('.')
  420              0.000294   let before = 0
                            
  420              0.000730   let text = getline(c_lnum)
  420              0.001399   let c_before = text->strpart(0, c_col - 1)->slice(-1)
  420              0.000937   let c = text->strpart(c_col - 1)->slice(0, 1)
  420              0.003513   let plist = split(&matchpairs, '.\zs[:,]')
  420              0.000842   let i = index(plist, c)
  420              0.000280   if i < 0
                                " not found, in Insert mode try character before the cursor
  410              0.000678     if c_col > 1 && (mode() == 'i' || mode() == 'R')
    9              0.000022       let before = strlen(c_before)
    9              0.000009       let c = c_before
    9              0.000014       let i = index(plist, c)
  410              0.000144     endif
  410              0.000223     if i < 0
                                  " not found, nothing to do
  410              0.000266       return
                                endif
   10              0.000003   endif
                            
                              " Figure out the arguments for searchpairpos().
   10              0.000007   if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
   10              0.000004   else
   10              0.000008     let s_flags = 'nbW'
   10              0.000008     let c2 = c
   10              0.000014     let c = plist[i - 1]
   10              0.000003   endif
   10              0.000007   if c == '['
                                let c = '\['
                                let c2 = '\]'
   10              0.000003   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
   10              0.000006   if before > 0
                                let save_cursor = getcurpos()
                                call cursor(c_lnum, c_col - before)
                                defer setpos('.', save_cursor)
   10              0.000003   endif
                            
   10              0.000032   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
   10              0.000023   elseif exists("b:ts_highlight") && &syntax != 'on'
   10              0.000028     let s_skip = "match(v:lua.vim.treesitter.get_captures_at_cursor(), '" .. 'string\|character\|singlequote\|escape\|symbol\|comment' .. "') != -1"
                              else
                                " do not attempt to match when the syntax item where the cursor is
                                " indicates there does not exist a matching parenthesis, e.g. for shells
                                " case statement: "case $var in foobar)"
                                "
                                " add the check behind a filetype check, so it only needs to be
                                " evaluated for certain filetypes
                                if ['sh']->index(&filetype) >= 0 && synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "shSnglCase"}) >= 0
                                  return
                                endif
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
                                let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
   10              0.000003   endif
                            
                              " Limit the search to lines visible in the window.
   10              0.000016   let stoplinebottom = line('w$')
   10              0.000012   let stoplinetop = line('w0')
   10              0.000006   if i % 2 == 0
                                let stopline = stoplinebottom
   10              0.000003   else
   10              0.000010     let stopline = stoplinetop
   10              0.000003   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
   10              0.000015   if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
   10              0.000003   else
   10              0.000030     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
   10              0.000003   endif
   10              0.000004   try
   10              0.009066     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
   10              0.000006   endtry
                            
                              " If a match is found setup match highlighting.
   10              0.000019   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom
    8              0.000009     if !g:matchparen_disable_cursor_hl
    8              0.000049       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
                                else
                                  call add(w:matchparen_ids, matchaddpos('MatchParen', [[m_lnum, m_col]], 10))
    8              0.000003     endif
    8              0.000008     let w:paren_hl_on = 1
   10              0.000003   endif

FUNCTION  <SNR>2_LoadIndent()
    Defined: /opt/homebrew/Cellar/neovim/0.11.3/share/nvim/runtime/indent.vim:14
Called 7 times
Total time:   0.007331
 Self time:   0.007331

count  total (s)   self (s)
    7              0.000039     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    7              0.000005     endif
    7              0.000034     let s = expand("<amatch>")
    7              0.000012     if s != ""
    7              0.000012       if exists("b:did_indent")
                            	unlet b:did_indent
    7              0.000004       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
   14              0.000042       for name in split(s, '\.')
                                    " XXX: "[.]" in the pattern makes it a wildcard on Windows
    7              0.007094         exe $'runtime! indent/{name}[.]{{vim,lua}}'
   14              0.000016       endfor
    7              0.000004     endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  420   0.033850   0.030115  <SNR>24_Highlight_Matching_Pair()
    7   0.029960             <SNR>1_LoadFTPlugin()
  210   0.018122             SetRmdCommentStr()
    7   0.011554             <SNR>37_SynSet()
    7   0.007331             <SNR>2_LoadIndent()
  420   0.003735             <SNR>24_Remove_Matches()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  420   0.033850   0.030115  <SNR>24_Highlight_Matching_Pair()
    7              0.029960  <SNR>1_LoadFTPlugin()
  210              0.018122  SetRmdCommentStr()
    7              0.011554  <SNR>37_SynSet()
    7              0.007331  <SNR>2_LoadIndent()
  420              0.003735  <SNR>24_Remove_Matches()

